<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE project [
   <!ENTITY buildmagic SYSTEM "../tools/etc/buildmagic/buildmagic.ent">
]>

<!-- ====================================================================== -->
<!--                                                                        -->
<!--  JBoss, the OpenSource J2EE webOS                                      -->
<!--                                                                        -->
<!--  Distributable under LGPL license.                                     -->
<!--  See terms of license at http://www.gnu.org.                           -->
<!--                                                                        -->
<!-- ====================================================================== -->

<!-- $Id: build.xml 105677 2010-06-03 17:23:15Z pgier $ -->

<project default="main" name="JBoss/Build">

  <!-- ================================================================== -->
  <!-- Setup                                                              -->
  <!-- ================================================================== -->

  <!--
     | Include the common Buildmagic elements.
     |
     | This defines several different targets, properties and paths.
     | It also sets up the basic extention tasks amoung other things.
   -->

  &buildmagic;

  <condition property="build.properties.file.exists">
    <available file="build.properties" type="file"/>
  </condition>

  <fail unless="build.properties.file.exists">
  build.properties file not found.
Please ensure that build.properties exists in the build dir of the checkout tree.
  </fail>

 
  <!-- Read in properties file for configuration to go smoothly-->
  <property file="build.properties"/>

  <!-- Add the antcontrib tasks -->
  <taskdef resource="net/sf/antcontrib/antcontrib.properties">
    <classpath>
      <pathelement location="${basedir}/../tools/lib/ant-contrib-1.0b3.jar"/>
    </classpath>
  </taskdef>
  
  <!-- ================================================================== -->
  <!-- Initialization                                                     -->
  <!-- ================================================================== -->

  <!--
     | Initialize the build system.  Must depend on '_buildmagic:init'.
     | Other targets should depend on 'init' or things will mysteriously fail.
   -->

  <target name="init" unless="init.disable" depends="_buildmagic:init">
  </target>


  <!-- ================================================================== -->
  <!-- Configuration                                                      -->
  <!-- ================================================================== -->

  <!--
     | Configure the build system.
     |
     | This target is invoked by the Buildmagic initialization logic and
     | should contain module specific configuration elements.
   -->

  <target name="configure" unless="configure.disable">

    <!-- =================== -->
    <!-- Basic Configuration -->
    <!-- =================== -->

    <!-- Module name(s) & version -->
    <property name="module.name" value="jboss"/>
    <property name="module.Name" value="JBoss Build"/>
    <condition property="module.version" value="${version.major}.${version.minor}.${version.revision}.${version.tag}">
       <isset property="release.version.tag"/>
    </condition>
    <condition property="module.version" value="${version.major}.${version.minor}.${version.revision}.${version.tag}">
<!--    <condition property="module.version" value="${version.major}.${version.minor}.${version.revision}"> -->
       <not>
          <isset property="release.version.tag"/>
       </not>
    </condition>

    <!-- Choose between EAP and EWP build -->
    <condition property="build.ewp">
       <and>
          <isset property="version.name"/>
          <equals arg1="${version.name}" arg2="EWP"/>
       </and>
    </condition>

    <!-- The combined library classpath -->
    <path id="library.classpath">
    </path>

    <!-- ============== -->
    <!-- Modules/Groups -->
    <!-- ============== -->

    <!-- The group to use by default -->
    <property name="groups" value="default"/>


    <!-- Sets up the module configuration. -->
    <moduleconfig property="modules" selected="${groups}">

      <!-- Modules -->
      <module name="aspects"/>
      <module name="cluster"/>
      <module name="connector"/>
      <module name="console"/>
      <module name="deployment"/>
      <module name="ejb3"/>
      <module name="embedded"/>
      <module name="hibernate-int"/>
      <module name="iiop"/>
      <module name="j2se"/>
      <module name="jmx"/>
      <module name="main"/>
      <module name="management"/>
      <module name="mbeans"/>
      <module name="messaging"/>
      <module name="hornetq-int"/>
      <module name="jbossas/remoting"/>
      <module name="jmx-remoting"/>
      <module name="jbossas/jmx-remoting"/>
      <module name="profileservice"/>
      <module name="security"/>
      <module name="server"/>
      <module name="spring-int"/>
      <module name="system"/>
      <module name="system-jmx"/>
      <module name="testsuite"/>
      <module name="tomcat"/>
      <module name="varia"/>
      <module name="webservices"/>

      <!-- Module groups -->

      <!--this lets you recompile a single module using a command line like
./build.sh -emacs -Dgroups=single -Dsingle-module=server
      -->
      <group name="single">
        <include modules="${single-module}"/>
      </group>

      <group name="core">
        <include modules="main, j2se, mbeans, jmx, system, system-jmx"/>
      </group>

      <group name="basic">
        <include modules="security,
                          server,
                          deployment" />

      </group>

      <group name="standard">
        <include modules="jbossas/remoting,
                          jmx-remoting,
                          jbossas/jmx-remoting,
                          messaging,
                          hornetq-int,
                          cluster,
                          varia,
                          iiop,
                          aspects,
                          profileservice,
                          connector,
                          management,
                          ejb3,
                          tomcat,
                          webservices,
                          hibernate-int,
                          console,
                          spring-int
                          "/>
      </group>

      <group name="optional">
         <include modules="embedded
            "/>
      </group>

      <!-- Module group sets -->

      <group name="default">
        <include groups="core, basic, standard"/>
      </group>

      <group name="most">
        <include groups="core, basic, standard"/>
      </group>

      <group name="all">
        <include groups="core, basic, standard, optional"/>
      </group>

      <group name="production">
        <include groups="core, basic, standard, optional"/>
      </group>

    </moduleconfig>

    <!-- Show the module configuration -->
    <echo>groups:  ${groups}</echo>
    <echo>modules: ${modules}</echo>

    <!-- The combined dependent module classpath -->
    <path id="dependentmodule.classpath">
    </path>

    <!-- ===== -->
    <!-- Tasks -->
    <!-- ===== -->

    <!-- Skip any missing modules and issue a warning -->
    <property name="executemodules.skipmissing" value="true"/>

    <!-- The header and footer displayed during each module execution -->
    <property name="executemodules.header"><![CDATA[
    ======================================================================
    ==  Executing '${target}' in module '${module}'...
    ==]]></property>

    <property name="executemodules.footer"><![CDATA[
    ==
    ==  Finished with '${target}' in module '${module}'.
    ======================================================================
    ]]></property>

    <property name="executemodules.exportproperties">
       version.major,
       version.minor,
       version.revision,
       version.tag,
       version.name,
       version.cvstag,

       specification.title,
       specification.version,
       specification.vendor,

       implementation.title,
       implementation.version,
       implementation.vendor,
       implementation.vendor.id,
       implementation.url
    </property>

    <!-- Install/Release structure -->
    <property name="install.id" value="${module.name}-${module.version}"/>
    <property name="release.id" value="${install.id}"/>

    <property name="install.root" value="${module.output}/${install.id}"/>

    <property name="install.docs" value="${install.root}/docs"/>
    <property name="install.api" value="${install.docs}/api"/>
    <property name="install.jmx-api" value="${install.docs}/jmx-api"/>
    <property name="install.todo" value="${install.docs}/todo"/>
    <property name="install.examples" value="${install.docs}/examples"/>
    <property name="install.examples.jca" value="${install.docs}/examples/jca"/>
    <property name="install.examples.jms" value="${install.docs}/examples/jms"/>
    <property name="install.examples.jbossweb" value="${install.examples}/jbossweb"/>
    <!--<property name="install.examples.binding-manager" value="${install.examples}/binding-manager"/>-->
    <property name="install.examples.varia" value="${install.examples}/varia"/>
    <property name="install.dtd" value="${install.docs}/dtd"/>
    <property name="install.schema" value="${install.docs}/schema"/>

    <property name="install.bin" value="${install.root}/bin"/>
    <property name="install.etc" value="${install.root}/etc"/>
    <property name="install.client" value="${install.root}/client"/>
    <property name="install.lib" value="${install.root}/lib"/>

    <property name="install.server" value="${install.root}/server"/>
    <property name="install.all" value="${install.server}/all"/>
    <property name="install.all.lib" value="${install.all}/lib"/>
    <property name="install.all.deploy" value="${install.all}/deploy"/>
    <property name="install.all.deployers" value="${install.all}/deployers"/>
    <property name="install.all.conf" value="${install.all}/conf"/>
    <property name="install.all.deploy.hasingleton" value="${install.all}/deploy-hasingleton"/>

    <property name="install.production" value="${install.server}/production"/>
    <property name="install.production.lib" value="${install.production}/lib"/>
    <property name="install.production.deploy" value="${install.production}/deploy"/>
    <property name="install.production.deployers" value="${install.production}/deployers"/>
    <property name="install.production.conf" value="${install.production}/conf"/>
    <property name="install.production.deploy.hasingleton" value="${install.production}/deploy-hasingleton"/>

    <property name="install.default" value="${install.server}/default"/>
    <property name="install.default.lib" value="${install.default}/lib"/>
    <property name="install.default.deploy" value="${install.default}/deploy"/>
    <property name="install.default.deployers" value="${install.default}/deployers"/>
    <property name="install.default.conf" value="${install.default}/conf"/>

    <property name="install.minimal" value="${install.server}/minimal"/>
    <property name="install.minimal.lib" value="${install.minimal}/lib"/>
    <property name="install.minimal.deploy" value="${install.minimal}/deploy"/>
    <property name="install.minimal.deployers" value="${install.minimal}/deployers"/>
    <property name="install.minimal.conf" value="${install.minimal}/conf"/>

    <property name="install.web" value="${install.server}/web"/>
    <property name="install.web.lib" value="${install.web}/lib"/>
    <property name="install.web.deploy" value="${install.web}/deploy"/>
    <property name="install.web.deployers" value="${install.web}/deployers"/>
    <property name="install.web.conf" value="${install.web}/conf"/>

    <property name="install.standard" value="${install.server}/standard"/>
    <property name="install.standard.lib" value="${install.standard}/lib"/>
    <property name="install.standard.deploy" value="${install.standard}/deploy"/>
    <property name="install.standard.deployers" value="${install.standard}/deployers"/>
    <property name="install.standard.conf" value="${install.standard}/conf"/>
    
    <!-- libs shared by the server configurations -->
    <property name="install.common" value="${install.root}/common"/>
    <property name="install.common.lib" value="${install.common}/lib"/>
    
    <!-- Configuration for the nightly build and test job -->
    <property name="run.nightly.sleep" value="1"/> <!-- 1 minute -->
    <property name="run.nightly.email.tolist" value="jboss-development@lists.sourceforge.net"/>
    <property name="run.nightly.email.from" value="noreply@jboss.org"/>
    <property name="run.nightly.email.mailhost" value="localhost"/>
    <property name="run.home.dir" value="${module.output}/${release.id}" />
    <property name="run.bin.dir" value="${run.home.dir}/bin" />

    <!-- Bits for building source archives -->
    <patternset id="source.ignore">
      <exclude name="**/output/**"/>
      <exclude name="**/CVS/**" />
    </patternset>
    <patternset id="source.free">
      <exclude name="tools/**"/>
      <exclude name="thirdparty/**"/>
      <include name="**"/>
    </patternset>
    <patternset id="source.external">
      <include name="tools/**"/>
      <include name="thirdparty/**"/>
    </patternset>
</target>

  <!-- ================================================================== -->
  <!-- Module Pass-through Targets                                        -->
  <!-- ================================================================== -->

  <!--
     | These targets will execute all configured modules with the specified
     | target.
   -->

  <target name="modules-all" depends="_buildmagic:modules:all">
     <antcall target="thirdparty"/>
  </target>
  <target name="modules-most" depends="_buildmagic:modules:most">
     <antcall target="thirdparty"/>
  </target>
  <target name="modules-main" depends="_buildmagic:modules:main"/>
  <target name="modules-release" depends="_buildmagic:modules:release"/>
  <target name="modules-tests" depends="_buildmagic:modules:tests"/>
  <target name="modules-clean" depends="_buildmagic:modules:clean"/>
  <target name="modules-clobber" depends="_buildmagic:modules:clobber"/>
  <target name="modules-docs" depends="_buildmagic:modules:docs"/>

  <!-- ================================================================== -->
  <!-- Module Pass-through Hooks                                          -->
  <!-- ================================================================== -->

  <!--
     | These hooks are executed after the above pass-through targets have
     | finished with a given module.
   -->

   <!-- ======== -->
   <!-- Test     -->
   <!-- ======== -->

   <target name="_module-test-most">
     <ant antfile="build-distr.xml" target="_module-test-most"/>
   </target>

   <target name="_module-test-all" depends="_module-test-most">
     <ant antfile="build-distr.xml" target="_module-test-all"/>
   </target>

  <!-- ======== -->
  <!-- Remoting -->
  <!-- ======== -->

  <target name="_module-jbossas/remoting-most">
     <ant antfile="build-distr.xml" target="_module-jbossas/remoting-most"/>
  </target>

  <target name="_module-remoting-all" depends="_module-jbossas/remoting-most">
     <ant antfile="build-distr.xml" target="_module-jbossas/remoting-all"/>
  </target>

  <!-- ============ -->
  <!-- JMX Remoting -->
  <!-- ============ -->

   <target name="_module-jmx-remoting-most">
     <ant antfile="build-distr.xml" target="_module-jmx-remoting-most"/>
   </target>

   <target name="_module-jmx-remoting-all" depends="_module-jmx-remoting-most">
     <ant antfile="build-distr.xml" target="_module-jmx-remoting-all"/>
   </target>

   <target name="_module-jbossas/jmx-remoting-all" depends="_module-jbossas/jmx-remoting-most">
     <ant antfile="build-distr.xml" target="_module-jbossas/jmx-remoting-all"/>
   </target>

   <target name="_module-jbossas/jmx-remoting-most">
     <ant antfile="build-distr.xml" target="_module-jbossas/jmx-remoting-most"/>
   </target>

   <!-- ======== -->
   <!-- EJB 3.0 -->
   <!-- ======== -->

   <target name="_module-ejb3-most">
     <ant antfile="build-distr.xml" target="_module-ejb3-most"/>
   </target>

   <target name="_module-ejb3-all" depends="_module-ejb3-most">
     <ant antfile="build-distr.xml" target="_module-ejb3-all"/>
   </target>

  <!-- ======== -->
   <!-- EJB3X -->
   <!-- ======== -->

<!--
   <target name="_module-ejb3x-most">
     <ant antfile="build-distr.xml" target="_module-ejb3x-most"/>
   </target>
-->

  <!-- ======== -->
  <!-- ASPECTS -->
  <!-- ======== -->

  <target name="_module-aspects-most">
     <ant antfile="build-distr.xml" target="_module-aspects-most"/>
  </target>

  <target name="_module-aspects-all" depends="_module-aspects-most">
     <ant antfile="build-distr.xml" target="_module-aspects-all"/>
  </target>

  <!-- ==== -->
  <!-- J2EE -->
  <!-- ==== -->

<!--
  <target name="_module-j2ee-most">
     <ant antfile="build-distr.xml" target="_module-j2ee-most"/>
  </target>

  <target name="_module-j2ee-all" depends="_module-j2ee-most">
     <ant antfile="build-distr.xml" target="_module-j2ee-all"/>
  </target>
-->

  <!-- ==== -->
  <!-- Main -->
  <!-- ==== -->

  <target name="_module-main-most">
     <ant antfile="build-distr.xml" target="_module-main-most"/>
  </target>

  <target name="_module-main-all" depends="_module-main-most">
     <ant antfile="build-distr.xml" target="_module-main-all"/>
  </target>

  <!-- ====== -->
  <!-- System -->
  <!-- ====== -->

  <target name="_module-system-most">
     <ant antfile="build-distr.xml" target="_module-system-most"/>
  </target>

  <target name="_module-system-all" depends="_module-system-most">
     <ant antfile="build-distr.xml" target="_module-system-all"/>
  </target>
	  <target name="_module-system-jmx-most">
	     <ant antfile="build-distr.xml" target="_module-system-jmx-most"/>
	  </target>

	  <target name="_module-system-jmx-all" depends="_module-system-jmx-most">
	     <ant antfile="build-distr.xml" target="_module-system-jmx-all"/>
	  </target>

  <!-- ====== -->
  <!-- Server -->
  <!-- ====== -->

  <target name="_module-server-most">
     <ant antfile="build-distr.xml" target="_module-server-most"/>
  </target>

  <target name="_module-server-all" depends="_module-server-most">
     <ant antfile="build-distr.xml" target="_module-server-all"/>
  </target>

  <!-- ========= -->
  <!-- Connector -->
  <!-- ========= -->

  <target name="_module-connector-most">
     <ant antfile="build-distr.xml" target="_module-connector-most"/>
  </target>

  <target name="_module-connector-all" depends="_module-connector-most">
     <ant antfile="build-distr.xml" target="_module-connector-all"/>
  </target>

  <!-- ========= -->
  <!-- Messaging -->
  <!-- ========= -->

  <target name="_module-messaging-most">
     <ant antfile="build-distr.xml" target="_module-messaging-most"/>
  </target>

  <target name="_module-messaging-all" depends="_module-messaging-most">
     <ant antfile="build-distr.xml" target="_module-messaging-all"/>
  </target>

   <!-- ========= -->
  <!-- HornetQ -->
  <!-- ========= -->

  <target name="_module-hornetq-int-most">
     <ant antfile="build-distr.xml" target="_module-hornetq-int-most"/>
  </target>

  <target name="_module-hornetq-int-all" depends="_module-hornetq-int-most">
     <ant antfile="build-distr.xml" target="_module-hornetq-int-all"/>
  </target>

  <!-- ==== -->
  <!-- J2SE -->
  <!-- ==== -->

  <target name="_module-j2se-most">
     <ant antfile="build-distr.xml" target="_module-j2se-most"/>
  </target>

  <target name="_module-j2se-all" depends="_module-j2se-most">
     <ant antfile="build-distr.xml" target="_module-j2se-all"/>
 </target>

  <!-- ====== -->
  <!-- MBeans -->
  <!-- ====== -->

  <target name="_module-mbeans-most">
     <ant antfile="build-distr.xml" target="_module-mbeans-most"/>
  </target>

  <target name="_module-mbeans-all" depends="_module-mbeans-most">
     <ant antfile="build-distr.xml" target="_module-mbeans-most"/>
 </target>

  <!-- === -->
  <!-- JMX -->
  <!-- === -->

  <target name="_module-jmx-most">
     <ant antfile="build-distr.xml" target="_module-jmx-most"/>
  </target>

  <target name="_module-jmx-all" depends="_module-jmx-most">
     <ant antfile="build-distr.xml" target="_module-jmx-all"/>
 </target>

  <!-- ======== -->
  <!-- Security -->
  <!-- ======== -->

  <target name="_module-security-most">
     <ant antfile="build-distr.xml" target="_module-security-most"/>
  </target>

  <target name="_module-security-all" depends="_module-security-most">
     <ant antfile="build-distr.xml" target="_module-security-all"/>
  </target>

  <!-- ======= -->
  <!-- Cluster -->
  <!-- ======= -->

  <target name="_module-cluster-most">
     <ant antfile="build-distr.xml" target="_module-cluster-most"/>
  </target>

  <target name="_module-cluster-all" depends="_module-cluster-most">
     <ant antfile="build-distr.xml" target="_module-cluster-all"/>
  </target>

  <!-- ===== -->
  <!-- Varia -->
  <!-- ===== -->

  <target name="_module-varia-most">
     <ant antfile="build-distr.xml" target="_module-varia-most"/>
  </target>

  <target name="_module-varia-all" depends="_module-varia-most">
     <ant antfile="build-distr.xml" target="_module-varia-all"/>
  </target>

  <!-- ===== -->
  <!-- Tomcat5.5.x -->
  <!-- ===== -->

  <target name="_module-tomcat-most">
     <ant antfile="build-distr.xml" target="_module-tomcat-most"/>
  </target>

  <target name="_module-tomcat-all" depends="_module-tomcat-most">
     <ant antfile="build-distr.xml" target="_module-tomcat-all"/>
  </target>


  <!-- ==== -->
  <!-- IIOP -->
  <!-- ==== -->

  <target name="_module-iiop-most">
     <ant antfile="build-distr.xml" target="_module-iiop-most"/>
  </target>

  <target name="_module-iiop-all" depends="_module-iiop-most">
     <ant antfile="build-distr.xml" target="_module-iiop-all"/>
  </target>

  <!-- ========== -->
  <!-- Management -->
  <!-- ========== -->

  <target name="_module-management-most">
     <ant antfile="build-distr.xml" target="_module-management-most"/>
  </target>

  <target name="_module-management-all" depends="_module-management-most">
     <ant antfile="build-distr.xml" target="_module-management-all"/>
  </target>

  <!-- ======= -->
  <!-- Console -->
  <!-- ======= -->

  <target name="_module-console-most">
     <ant antfile="build-distr.xml" target="_module-console-most"/>
  </target>

  <target name="_module-console-all" depends="_module-console-most">
     <ant antfile="build-distr.xml" target="_module-console-all"/>
  </target>





  <!-- ========== -->
  <!-- Deployment -->
  <!-- ========== -->

  <target name="_module-deployment-most">
     <ant antfile="build-distr.xml" target="_module-deployment-most"/>
  </target>

  <target name="_module-deployment-all" depends="_module-deployment-most">
     <ant antfile="build-distr.xml" target="_module-deployment-all"/>
  </target>

  <!-- =========== -->
  <!-- Webservices -->
  <!-- =========== -->

  <target name="_module-webservices-most">
     <ant antfile="build-distr.xml" target="_module-webservices-most"/>
  </target>

  <target name="_module-webservices-all" depends="_module-webservices-most">
     <ant antfile="build-distr.xml" target="_module-webservices-all"/>
  </target>

  <!-- ============ -->
  <!-- Hibernate    -->
  <!-- ============ -->

  <target name="_module-hibernate-int-most">
     <ant antfile="build-distr.xml" target="_module-hibernate-int-most"/>
  </target>

  <target name="_module-hibernate-int-all" depends="_module-hibernate-int-most">
     <ant antfile="build-distr.xml" target="_module-hibernate-int-all"/>
  </target>

   <!-- ============ -->
   <!--   ProfileService     -->
   <!-- ============ -->

   <target name="_module-profileservice-most">
      <ant antfile="build-distr.xml" target="_module-profileservice-most"/>
   </target>
   
   <target name="_module-profileservice-all">
      <ant antfile="build-distr.xml" target="_module-profileservice-most"/>
   </target>

    <!-- ============ -->
    <!--   Spring     -->
    <!-- ============ -->

  <target name="_module-spring-int-most">
         <ant antfile="build-distr.xml" target="_module-spring-int-most"/>
  </target>

  <target name="_module-spring-int-all" depends="_module-spring-int-most">
     <ant antfile="build-distr.xml" target="_module-spring-int-all"/>
  </target>

  <target name="thirdparty">
     <ant antfile="build-distr.xml" target="thirdparty"/>
  </target>


  <!-- ================================================================== -->
  <!-- Install & Release                                                  -->
  <!-- ================================================================== -->

  <target name="install"
	  description="Install the structure for a release."
     depends="partition-build"
     />

  
  <!-- Partition the default single configuration build into a all, production,
  default and minimal configs with a minimal set of jars in the root lib dir.
  -->
  <target name="partition-build" depends="init">
    <antcall target="addJmxToRunJar"/>
    <antcall target="partition-community"/>
    <antcall target="partition-community-ewp"/>
    <antcall target="partition-production"/>
    <antcall target="partition-production-ewp"/>
    <antcall target="jboss-all-client"/>
    <!--<antcall target="setup-ejb3-dist"/>-->
    <antcall target="apply_auth_patch"/>
    <antcall target="skipped_auth_patch"/>
    <antcall target="apply_patch"/>
  </target>

  <target name="apply_auth_patch" unless="build.unsecure">
	<echo> "building secure in folder ${install.root}"</echo>
   <patch patchFile="jbossas-5-enableauth.patch" dir="${install.root}" strip="0">
   </patch>
  </target>

  <target name="skipped_auth_patch" if="build.unsecure">
	<echo> "The 'build.unsecure' property was specified (it doesn't matter what value was given), skipping the secure patch"</echo>
  </target>

  <target name="apply_patch" unless="build.ewp">
   <echo> "applying jbossas-5.patch in folder ${install.root}"</echo>
   <patch patchFile="jbossas-5.patch" dir="${install.root}" strip="0">
   </patch>
  </target>


  <!-- Update config and other files for production config -->
  <target name="makeProductionConfigChanges" 
          depends="partition-community,partition-production">

  </target>

  <target name="partition-production" depends="init" unless="build.ewp">

    <!-- Build production based on all -->
    <!-- Copy server/all to server/production
    -->
    <copy todir="${install.production}">
      <fileset dir="${install.all}">
      </fileset>
    </copy>

  </target>

  <target name="partition-production-ewp" depends="init" if="build.ewp">

    <!-- Build production based on default -->
    <!-- Copy server/default to server/production
    -->
    <copy todir="${install.production}">
      <fileset dir="${install.default}">
      </fileset>
    </copy>
          
    <!-- move production config files to the names that are used -->
    <move file="${install.production}/conf/jboss-log4j-production.xml" tofile="${install.production}/conf/jboss-log4j.xml"/>
    <move file="${install.production}/deploy/jca-jboss-beans-production.xml" tofile="${install.production}/deploy/jca-jboss-beans.xml"/>
    <move file="${install.production}/deploy/hdscanner-jboss-beans-production.xml" tofile="${install.production}/deploy/hdscanner-jboss-beans.xml"/>
    <move file="${install.production}/conf/jboss-service-production.xml" tofile="${install.production}/conf/jboss-service.xml"/>

    <!-- delete production litter -->
    <delete file="${install.production}/conf/jboss-log4j-production.xml"/>
    <delete file="${install.default}/conf/jboss-log4j-production.xml"/>

    <delete file="${install.production}/deploy/jca-jboss-beans-production.xml"/>	
    <delete file="${install.default}/deploy/jca-jboss-beans-production.xml"/>	

    <delete file="${install.production}/deploy/hdscanner-jboss-beans-production.xml"/>	
    <delete file="${install.default}/deploy/hdscanner-jboss-beans-production.xml"/>	

    <delete file="${install.production}/conf/jboss-service-production.xml"/>
    <delete file="${install.default}/conf/jboss-service-production.xml"/>	

    <!-- end delete production litter -->

    <!-- delete common, client and deployers litter -->
    <delete file="${install.common.lib}/xnio-api.jar"/>	

    <delete file="${install.client}/jboss-iiop-client.jar"/>	
    <delete file="${install.client}/jboss-messaging-client.jar"/>	

    <delete dir="${install.default}/deployers/bsh.deployer"/>	
    <delete dir="${install.production}/deployers/bsh.deployer"/>	

    <delete dir="${install.default}/conf/props/messaging-roles.properties"/>	
    <delete dir="${install.default}/conf/props/messaging-users.properties"/>	
    <delete dir="${install.production}/conf/props/messaging-roles.properties"/>	
    <delete dir="${install.production}/conf/props/messaging-users.properties"/>	

    <!-- delete examples that make no sense for EWP (JBPAPP-3570) -->
    <delete dir="${install.examples}/jms"/>	
    <delete dir="${install.examples}/jmx/jmx-remoting.sar"/>	
    <delete dir="${install.examples}/transactions"/>	
    <delete file="${install.examples}/jmx/ejb-management.jar"/>	

    <!-- default is not clustered, do not deploy cluster stuff -->
    <delete dir="${install.default}/deploy/cluster"/>	
    <delete dir="${install.default}/deploy-hasingleton"/>	
    <delete dir="${install.default}/farm"/>	
    <delete file="${install.default}/lib/jgroups.jar"/>
    <delete file="${install.default}/lib/jbosscache-core.jar"/>
    <delete file="${install.default}/lib/jbosscache-pojo.jar"/>
    <delete file="${install.default}/lib/hibernate-jbosscache2.jar"/>

    <!-- Nor use this config as the beans will not work -->
    <delete file="${install.default}/deployers/clustering-deployer-jboss-beans.xml"/>	

    <!-- Nor use this config as it is not correct (see JBPAPP-3230) -->
    <delete file="${install.production}/farm/cluster-examples-service.xml"/>	

    <!-- end delete client and deployers litter -->

    <!-- Change some defauls in the production config -->
   <patch patchFile="jbossas-5-ewp-production.patch"
       dir="${install.root}" strip="0"/>

  </target>

  <!-- Partition the default single configuration build into a minimal,
  default and all configs with a minimal set of jars in the root lib dir.
  -->
  <target name="partition-community" depends="init" unless="build.ewp">

    <!-- move to the common library directory the jars common to all configs;
         the minimal config currently is not point to it
    -->
    <move todir="${install.common.lib}">
      <fileset dir="${install.all.lib}">
        <exclude name="jacorb.jar"/>
        <exclude name="jbosscache-core.jar"/>
        <exclude name="jbosscache-pojo.jar"/>
        <exclude name="jgroups.jar"/>
        <exclude name="jcip-annotations.jar"/>
        <!-- We only include the hibernate-jbosscache integration jar
             in 'all' (later copied to 'production'), because it doesn't work 
             without JBC and JGroups, which are only in 'all'. Also, this is 
             how it was packaged in EAP 5.0.0.GA. -->
        <exclude name="hibernate-jbosscache2.jar"/>
        <!-- JBPAPP-3180. The other hibernate 2nd Level Cache integration
             jars are allowed to move to commmon/lib because their classes 
             were available in 'default' in EAP 4.x. Having them only in
             'all' is an incompatibility. -->
        <!--
        <exclude name="hibernate-ehcache.jar"/>
        <exclude name="hibernate-oscache.jar"/>
        <exclude name="hibernate-swarmcache.jar"/>
        -->
      </fileset>
    </move>
    
    <!-- Copy server/all to server/default and then remove the services 
         outside of the scope of the default config
    -->
    <copy todir="${install.default}">
      <fileset dir="${install.all}">
        <exclude name="data/**"/>
        <exclude name="deploy-hasingleton/**"/>
        <exclude name="farm/**"/>
        <exclude name="lib/**"/>
        <exclude name="log/**"/>
        <exclude name="tmp/**"/>
        <exclude name="work/**"/>
        <exclude name="conf/jacorb.properties"/>
        <exclude name="conf/jboss-log4j-production.xml"/>
        <exclude name="deploy/cluster/**"/>
        <exclude name="deploy/iiop-service.xml"/>
        <exclude name="deploy/deploy.last/**"/>
        <exclude name="deploy/httpha-invoker.sar/**"/>
        <exclude name="deploy/snmp-adaptor.sar/**"/>
        <exclude name="deploy/juddi-service.sar/**"/>
        <exclude name="deploy/messaging/**"/>
        <exclude name="deployers/clustering-deployer-jboss-beans.xml"/>        
        <exclude name="deployers/ejb3.deployer/META-INF/ejb3-iiop-deployers-jboss-beans.xml"/>        
      </fileset>
    </copy>
    <!-- leave the empty default/lib directory there --> 
    <mkdir dir="${install.default.lib}"/>
  	
    <copy todir="${install.default.conf}" overwrite="true">
    	<fileset dir="${project.root}/server/output/etc/conf/default"/>
	 </copy>
          
    <copy tofile="${install.default}/deployers/clustering-deployer-jboss-beans.xml"
          file="${project.root}/cluster/output/etc/clustering-deployer-jboss-beans-non-clustered.xml"/>
 
    <unjar src="${project.root}/varia/output/lib/http-invoker.sar"
      dest="${install.default}/deploy/http-invoker.sar"/>

    <!-- Build production based on all -->
    <!-- Copy server/all to server/production
    -->
    <copy todir="${install.production}">
      <fileset dir="${install.all}">
      </fileset>
    </copy>

    <!-- move production config files to the names that are used -->
	 <move file="${install.production}/conf/jboss-log4j-production.xml" tofile="${install.production}/conf/jboss-log4j.xml"/>
	 <move file="${install.production}/deploy/jca-jboss-beans-production.xml" tofile="${install.production}/deploy/jca-jboss-beans.xml"/>
	 <move file="${install.production}/deploy/hdscanner-jboss-beans-production.xml" tofile="${install.production}/deploy/hdscanner-jboss-beans.xml"/>
	 <move file="${install.production}/deploy/uuid-key-generator.sar/META-INF/jboss-service-production.xml" tofile="${install.production}/deploy/uuid-key-generator.sar/META-INF/jboss-service.xml"/>
	 <move file="${install.production}/conf/jboss-service-production.xml" tofile="${install.production}/conf/jboss-service.xml"/>

    <!-- delete production litter -->
    <delete file="${install.production}/conf/jboss-log4j-production.xml"/>
    <delete file="${install.all}/conf/jboss-log4j-production.xml"/>

	 <delete file="${install.production}/deploy/jca-jboss-beans-production.xml"/>	
	 <delete file="${install.all}/deploy/jca-jboss-beans-production.xml"/>	
	 <delete file="${install.standard}/deploy/jca-jboss-beans-production.xml"/>	
	 <delete file="${install.default}/deploy/jca-jboss-beans-production.xml"/>	

	 <delete file="${install.production}/deploy/hdscanner-jboss-beans-production.xml"/>	
	 <delete file="${install.all}/deploy/hdscanner-jboss-beans-production.xml"/>	
	 <delete file="${install.standard}/deploy/hdscanner-jboss-beans-production.xml"/>	
	 <delete file="${install.default}/deploy/hdscanner-jboss-beans-production.xml"/>	

	 <delete file="${install.production}/deploy/uuid-key-generator.sar/META-INF/jboss-service-production.xml"/>
	 <delete file="${install.all}/deploy/uuid-key-generator.sar/META-INF/jboss-service-production.xml"/>	
	 <delete file="${install.standard}/deploy/uuid-key-generator.sar/META-INF/jboss-service-production.xml"/>
	 <delete file="${install.default}/deploy/uuid-key-generator.sar/META-INF/jboss-service-production.xml"/>	

	 <delete file="${install.production}/conf/jboss-service-production.xml"/>
	 <delete file="${install.all}/conf/jboss-service-production.xml"/>
	 <delete file="${install.web}/conf/jboss-service-production.xml"/>
	 <delete file="${install.standard}/conf/jboss-service-production.xml"/>
	 <delete file="${install.default}/conf/jboss-service-production.xml"/>	

    <!-- end delete production litter -->

    <!-- Build server/minimal manually -->
    <mkdir dir="${install.minimal.deploy}"/>
    <mkdir dir="${install.minimal.deployers}"/>
    <copy todir="${install.minimal.conf}">
      <fileset dir="${install.default.conf}">
        <include name="jndi.properties"/>
        <include name="jboss-log4j.xml"/>
        <exclude name="jboss-log4j-production.xml"/>
        <include name="bootstrap/classloader.xml"/>
        <include name="bootstrap/aop.xml"/>
        <include name="bootstrap/jmx.xml"/>
        <include name="bootstrap/deployers.xml"/>
        <include name="bootstrap/profile.xml"/>
        <include name="bootstrap/security.xml"/>
        <include name="xmdesc/NamingBean-xmbean.xml"/>
        <include name="xmdesc/NamingService-xmbean.xml"/>
        <include name="xmdesc/NamingProviderURLWriter-xmbean.xml"/>
        <include name="xmdesc/Log4jService-xmbean.xml"/>          
      </fileset>
    </copy>
    <copy todir="${install.minimal.conf}" overwrite="true">
      <fileset dir="${project.root}/server/output/etc/conf/minimal"/>
    </copy>
    <copy file="${project.root}/profileservice/output/resources/hdscanner-jboss-beans.xml" 
          todir="${install.minimal.deploy}" overwrite="true"/>
    <copy todir="${install.minimal.lib}">
      <fileset dir="${install.common.lib}">
        <include name="jnpserver.jar" />
        <include name="log4j.jar" />
      </fileset>
    </copy>
    <copy todir="${install.minimal.lib}"
      file="${project.root}/server/output/lib/jboss-minimal.jar" />

    <!-- Build standard config manually -->
    <copy todir="${install.standard}">
      <fileset dir="${install.default}">
        <include name="conf/**"/>
        <exclude name="conf/jboss-service.xml"/> <!-- call-by-value for jndi -->
	<exclude name="conf/jndi.properties"/>   <!-- ORBInitialContextFactory -->
        <include name="deploy/**"/>
        <exclude name="deploy/http-invoker.sar/**"/>
        <exclude name="deploy/jmx-remoting.sar/**"/>
        <exclude name="deploy/admin-console.war/**"/>
        <exclude name="deploy/management/**"/>
        <exclude name="deploy/cache-invalidation-service.xml"/>
        <exclude name="deploy/mail-ra.rar"/>
        <exclude name="deploy/monitoring-service.xml"/>
        <exclude name="deploy/properties-service.xml"/>
        <exclude name="deploy/quartz-ra.rar"/>
        <exclude name="deploy/schedule-manager-service.xml"/>
        <exclude name="deploy/scheduler-service.xml"/>
        <exclude name="deploy/sqlexception-service.xml"/>
        <exclude name="deploy/vfs-jboss-beans.xml"/>
        <!-- Exclude console to keep distr size sane, revisit common deploy location -->
        <exclude name="deploy/jopr-embedded-jbas5.war"/>
        <include name="deployers/**"/>   <!-- call-by-value & isolation -->
        <exclude name="deployers/ear-deployer-jboss-beans.xml"/>
      </fileset>
      <fileset dir="${install.all}">
        <include name="conf/jacorb.properties"/>
        <include name="deploy/juddi-service.sar/**"/>
        <include name="deploy/iiop-service.xml"/>
        <include name="lib/jacorb.jar"/>
      </fileset>
    </copy>
    <!-- install descriptor overrides -->
    <copy todir="${install.standard.conf}">
      <fileset dir="${project.root}/server/output/etc/conf/standard">
        <include name="jboss-service.xml"/>
	<include name="jndi.properties"/>
      </fileset>
    </copy>
    <copy todir="${install.standard.deployers}">
      <fileset dir="${project.root}/server/output/etc/conf/standard">
        <include name="ear-deployer-jboss-beans.xml"/>
      </fileset>
    </copy>

    <!-- Build web config manually -->
    <copy todir="${install.web}">
      <fileset dir="${install.default}">
        <include name="conf/**"/>
        <include name="deploy/**"/>
        <exclude name="deploy/messaging/**"/>
        <exclude name="deploy/management/**"/>
        <exclude name="deploy/sqlexception-service.xml"/>
        <exclude name="deploy/monitoring-service.xml"/>
        <exclude name="deploy/properties-service.xml"/>
        <exclude name="deploy/quartz-ra.rar"/>
        <exclude name="deploy/jms-ra.rar"/>
        <exclude name="deploy/jsr88-service.xml"/>
        <exclude name="deploy/jmx-remoting.sar"/>
        <exclude name="deploy/xnio-provider.jar"/>
        <exclude name="deploy/cache-invalidation-service.xml"/>
        <exclude name="deploy/uuid-key-generator.sar/**"/>
        <exclude name="deploy/http-invoker.sar/**"/>
        <exclude name="deploy/scheduler-service.xml"/>
        <exclude name="deploy/schedule-manager-service.xml"/>
        <include name="deployers/**"/> 
      </fileset>
      <fileset dir="${install.all}">
        <include name="deploy/cluster/jbossweb-cluster.aop"/>
        <include name="deploy/cluster/jgroups-channelfactory.sar/**"/>
        <include name="deploy/cluster/jboss-cache-manager.sar/**"/>
        <include name="lib/jbosscache-*"/>
        <include name="lib/hibernate-jbosscache2.jar"/>
        <include name="lib/jgroups.jar"/>
      </fileset>
    </copy>
  </target>

  <!-- Partition the default single configuration build into a
  default and production configs with a minimal set of jars in the root lib dir.
  Note that the EWP default config corresponds to the EAP web config.
  The EWP production config is clustered while the default one is not.
  -->
  <target name="partition-community-ewp" depends="init" if="build.ewp">

    <!-- move to the common library directory the jars common to all configs.
    -->
    <move todir="${install.common.lib}">
      <fileset dir="${install.all.lib}">
        <exclude name="hibernate-jbosscache2.jar"/>
        <!-- JBPAPP-3180. The other hibernate 2nd Level Cache integration
             jars are allowed to move to commmon/lib because their classes 
             were available in 'default' in EAP 4.x. Having them only in
             'all' is an incompatibility. -->
        <!--
		<exclude name="hibernate-ehcache.jar"/>
		<exclude name="hibernate-oscache.jar"/>
		<exclude name="hibernate-swarmcache.jar"/>
        -->
        <exclude name="jacorb.jar"/>
        <exclude name="jbosscache-core.jar"/>
        <exclude name="jbosscache-pojo.jar"/>
        <exclude name="jgroups.jar"/>
        <exclude name="bsf.jar"/>
        <exclude name="bsh.jar"/>
        <exclude name="jboss-iiop.jar"/>
        <exclude name="jboss-messaging-int.jar"/>
        <exclude name="jboss-messaging.jar"/>
        <exclude name="jboss-monitoring.jar"/>
        <exclude name="joesnmp.jar"/>
        <exclude name="log4j-snmp-appender.jar"/>
        <exclude name="quartz.jar"/>
      </fileset>
    </move>
    
    <!-- Copy server/all to server/default and then remove the services 
         outside of the scope of the default config
    -->
    <copy todir="${install.default}">
      <fileset dir="${install.all}">
        <exclude name="data/**"/>
        <exclude name="lib/**"/>
        <exclude name="log/**"/>
        <exclude name="tmp/**"/>
        <exclude name="work/**"/>
        <exclude name="conf/jacorb.properties"/>
        <exclude name="deploy/iiop-service.xml"/>
        <exclude name="deploy/deploy.last/**"/>
        <exclude name="deploy/httpha-invoker.sar/**"/>
        <exclude name="deploy/snmp-adaptor.sar/**"/>
        <exclude name="deploy/juddi-service.sar/**"/>
        <exclude name="deploy/messaging/**"/>
        <exclude name="deployers/ejb3.deployer/META-INF/ejb3-iiop-deployers-jboss-beans.xml"/>        
      </fileset>
    </copy>
    <!-- leave the empty default/lib directory there --> 
    <mkdir dir="${install.default.lib}"/>
  	
    <copy todir="${install.default.conf}" overwrite="true">
    	<fileset dir="${project.root}/server/output/etc/conf/default"/>
	 </copy>
 
    <unjar src="${project.root}/varia/output/lib/http-invoker.sar"
      dest="${install.default}/deploy/http-invoker.sar"/>

    <!-- Build web config manually -->
    <copy todir="${install.web}">
      <fileset dir="${install.default}">
        <include name="conf/**"/>
        <include name="deploy/**"/>
        <include name="deploy-hasingleton/**"/>
        <include name="farm/**"/>
        <exclude name="deploy/messaging/**"/>
        <exclude name="deploy/management/**"/>
        <exclude name="deploy/sqlexception-service.xml"/>
        <exclude name="deploy/monitoring-service.xml"/>
        <exclude name="deploy/properties-service.xml"/>
        <exclude name="deploy/quartz-ra.rar"/>
        <exclude name="deploy/jms-ra.rar"/>
        <exclude name="deploy/jsr88-service.xml"/>
        <exclude name="deploy/jmx-remoting.sar"/>
        <exclude name="deploy/xnio-provider.jar/**"/>
        <exclude name="deploy/cache-invalidation-service.xml"/>
        <exclude name="deploy/uuid-key-generator.sar/**"/>
        <exclude name="deploy/http-invoker.sar/**"/>
        <exclude name="deploy/scheduler-service.xml"/>
        <exclude name="deploy/schedule-manager-service.xml"/>
        <include name="deployers/**"/> 
        <exclude name="deployers/xnio.deployer/**"/>
      </fileset>
      <fileset dir="${install.all}">
        <include name="deploy/cluster/jbossweb-cluster.aop"/>
        <include name="deploy/cluster/jgroups-channelfactory.sar/**"/>
        <include name="deploy/cluster/jboss-cache-manager.sar/**"/>
        <include name="lib/jbosscache-*"/>
        <include name="lib/hibernate-jbosscache2.jar"/>
        <include name="lib/jgroups.jar"/>
        <exclude name="lib/bsf.jar"/>
        <exclude name="lib/bsh.jar"/>
        <exclude name="lib/jboss-iiop.jar"/>
        <exclude name="lib/jboss-messaging-int.jar"/>
        <exclude name="lib/jboss-messaging.jar"/>
        <exclude name="lib/jboss-monitoring.jar"/>
        <exclude name="lib/joesnmp.jar"/>
        <exclude name="lib/log4j-snmp-appender.jar"/>
        <exclude name="lib/quartz.jar"/>
      </fileset>
    </copy>
   <patch patchFile="jbossas-5-ewp.patch"
       dir="${install.root}" strip="0"/>

    <!-- We no longer need default nor all -->
    <delete dir="${install.all}"/>
    <delete dir="${install.default}"/>

    <!-- Recreate default based on web -->
    <!-- Copy server/web to server/default
    -->
    <mkdir dir="${install.default}"/>
    <copy todir="${install.default}">
      <fileset dir="${install.web}">
        <exclude name="deployers/messaging-definitions-jboss-beans.xml"/>
      </fileset>
    </copy>
    <delete dir="${install.web}"/>

  </target>
  
  <target name="jboss-all-client" depends="init"
      description="Create jar containing client classpath">

    <!--Create a jbossall-client.jar containing the classpath for everything a client app needs-->  
      
    <property name="client.jar.dir" location="${install.client}" />
    <property name="jbossall.client.filename" value="jbossall-client.jar"/>
    
    <fileset id="client.jar.fileset" dir="${client.jar.dir}">
      <include name="*-client.jar"/>
      <include name="netty.jar"/>
      <include name="commons-logging.jar"/>
      <include name="concurrent.jar"/>
      <include name="ejb3-persistence.jar"/>
      <include name="hibernate-core.jar"/>
      <include name="hibernate-annotations.jar"/>
      <include name="hibernate-commons-annotations.jar"/>
      <include name="hibernate-validator.jar"/>
      <include name="jboss-annotations-ejb3.jar"/>
      <include name="jboss-auth.jar"/>
      <include name="jboss-appclient.jar"/>
      <include name="jboss-common*.jar"/>
      <include name="jboss-ejb3-ext-api.jar"/>
      <include name="jboss-logging*.jar"/>
      <include name="slf4j-api.jar"/>
      <include name="slf4j-jboss-logging.jar"/>
      <include name="jboss-deployment.jar"/>
      <include name="jboss-ejb3-vfs-spi.jar"/>
      <include name="jboss-javaee.jar"/>
      <include name="jboss-integration.jar"/>
      <include name="jboss-j2se.jar"/>
      <include name="jboss-remoting.jar"/>
      <include name="jboss-security-spi.jar"/>
      <include name="jboss-serialization.jar"/>
      <include name="jmx-connector-client-factory.jar"/>
      <include name="namespace.jar"/>
      <include name="xmlsec.jar"/>
      <include name="jboss-messaging.jar"/>
      <include name="jboss-mdr.jar"/>
      <include name="jboss-deployers-core.jar"/>
      <include name="jboss-deployers-core-spi.jar"/>
      <include name="jboss-deployers-client.jar"/>
      <include name="jboss-deployers-client-spi.jar"/>
      <include name="jbossjts.jar"/>
      <include name="jbossjts-integration.jar"/>
      <include name="jboss-profileservice-client.jar"/>
      <!-- client excludes -->
      <exclude name="jbossws-native-client.jar"/>
      <exclude name="${jbossall.client.filename}"/>
    </fileset>    
    
    <path id="client.jar.classpath"> 
      <fileset refid="client.jar.fileset" /> 
    </path>
     
    <pathconvert property="client.jar.manifest.classpath" refid="client.jar.classpath"
                 pathsep=" " dirsep="${file.separator}">
      <map from="${client.jar.dir}${file.separator}" to="" />
    </pathconvert>
    
    <pathconvert property="client.jar.files" refid="client.jar.classpath" 
                 pathsep="${line.separator}"  dirsep="${file.separator}">
      <map from="${client.jar.dir}${file.separator}" to="" />
    </pathconvert>
    
    <mkdir dir="${module.output}/temp"/>
    <echo file="${module.output}/temp/readme.txt">
This jar file contains a classpath reference to various client jar files used by jboss client applications.
Each of the jar files in the following list must available in the same directory as the jbossall-client.jar,  Otherwise they will not be found by the classloader.

The classpath includes the following files:

${client.jar.files}
    </echo>
    
    <jar destfile="${install.client}/${jbossall.client.filename}" basedir="${module.output}/temp">
      <manifest>
          <attribute name="Specification-Title" value="${specification.title}"/>
          <attribute name="Specification-Version" value="${specification.version}"/>
          <attribute name="Specification-Vendor" value="${specification.vendor}"/>
          <attribute name="Implementation-Title" value="${implementation.title}"/>
          <attribute name="Implementation-Version" value="${implementation.version}"/>
          <attribute name="Implementation-Vendor" value="${implementation.vendor}"/>
          <attribute name="Implementation-Vendor-Id" value="${implementation.vendor.id}"/>
          <attribute name="Class-Path" value="${client.jar.manifest.classpath}"/>
      </manifest>
    </jar>

    <delete dir="${module.output}/temp" />
  	
  </target>

  <!-- ================================================================== -->
  <!-- Cleaning                                                           -->
  <!-- ================================================================== -->

  <!-- Clean up all build output -->
  <target name="clean" description="Cleans up most generated files."
          depends="maven-clean, checkthirdparty, _buildmagic:clean, 
                   modules-clean">
  </target>

  <!-- Clean up all generated files -->
  <target name="clobber" depends="_buildmagic:clobber, clean, modules-clobber"
	  description="Cleans up all generated files.">
    <delete file="${module.root}/*_run.log"/>
  </target>


  <!-- ================================================================== -->
  <!-- Misc.                                                              -->
  <!-- ================================================================== -->

  <target name="main" depends="most"
	  description="Executes the default target (most)."/>

  <target name="all" depends="maven-install, modules-all, install"
	  description="Executes all modules and builds everything."/>

  <target name="most" depends="maven-install, modules-most, install"
	  description="Executes all modules and builds most everything."/>

  <target name="release" depends="most" />

  <target name="help" depends="_buildmagic:help:build"
          description="Show this help message."/>

  <!-- Define a macro for calling maven -->
  <macrodef name="maven">
    <attribute name="options" default="" />
    <attribute name="goal" />
    <attribute name="basedir" />
    <attribute name="resultproperty" default="maven.result" />
    <element name="args" implicit="true" optional="true" />
    <sequential>
      <java classname="org.codehaus.classworlds.Launcher" fork="true" 
            dir="@{basedir}" resultproperty="@{resultproperty}">
        <jvmarg value="-Xmx512m"/>
        <classpath>
          <fileset dir="${maven.home}/boot">
            <include name="*.jar" />
          </fileset>
          <fileset dir="${maven.home}/lib">
            <include name="*.jar" />
          </fileset>
        </classpath>
        <sysproperty key="classworlds.conf" value="${maven.home}/bin/m2.conf" />
        <sysproperty key="maven.home" value="${maven.home}" />
        <!-- Use a private maven repo for EAP, since it reuses groupids, and would pollute the users repo -->
        <sysproperty key="maven.repo.local" value="${basedir}/../maven-repository"/>
        <arg line="--batch-mode -s ../tools/maven/conf/settings.xml @{options} @{goal}" />
      </java>
    </sequential>
  </macrodef>
  
  <target name="maven-init">
    <property name="maven.home" location="${basedir}/../tools/maven"/>
    <echo message="Maven Home set to ${maven.home}"/>
  </target>
  
  <target name="checkthirdparty">
    <if>
      <not>
        <available file="${basedir}/../thirdparty/libraries.ent"/>
      </not>
      <then>
        <antcall target="createthirdparty"/>
      </then>
    </if>
  </target>
  
   <!-- Call maven to create the thirdparty folder from artifacts in the maven repository -->
   <target name="createthirdparty" unless="inhibit.downloads"
      depends="maven-init, init, check.inhibit.downloads, set.proxy">
     
      <property name="maven.opts" value=""/>
      <property name="thirdparty.maven.opts" value="${maven.opts}"/>

      <maven basedir="${basedir}/../thirdparty" 
             options="${thirdparty.maven.opts}" 
             goal="dependency:tree"/>

      <maven basedir="${basedir}/../thirdparty" 
             options="${thirdparty.maven.opts}" 
             goal="generate-resources"
             resultproperty="maven.thirdparty.result"/>
      
      <fail message="Unable to build thirdparty directory.  See maven output for details.">
        <condition>
          <not>
            <equals arg1="${maven.thirdparty.result}" arg2="0"/>
          </not>
        </condition>
      </fail>
      
   </target>

  <!-- Call maven to build the mavenized modules -->
  <target name="maven-install" description="Run the install goal against the maven build"
          depends="maven-init">
    
     <property name="maven.opts" value=""/>
     <property name="maven.install.opts" value="-Dintegrated-build ${maven.opts}"/>

     <maven basedir="${basedir}/../thirdparty" 
            options="${maven.install.opts}" 
             goal="dependency:tree"/>

     <maven basedir="${basedir}/.." 
            options="${maven.install.opts}" 
            goal="install"
            resultproperty="maven.install.result"/>
     
     <fail message="Unable to build maven modules.  See maven output for details.">
       <condition>
         <not>
           <equals arg1="${maven.install.result}" arg2="0"/>
         </not>
       </condition>
     </fail>
     
  </target>

  <!-- Call maven to clean the mavenized modules -->
  <target name="maven-clean" description="Run the clean goal against the maven build."
          depends="maven-init">
    
     <property name="maven.clean.opts" value="-Dintegrated-build "/>

     <maven basedir="${basedir}/.." 
            options="${maven.clean.opts}" 
            goal="clean"
            resultproperty="maven.clean.result"/>
     
     <fail message="Unable to clean maven modules.  See maven output for details.">
       <condition>
         <not>
           <equals arg1="${maven.clean.result}" arg2="0"/>
         </not>
       </condition>
     </fail>
     
  </target>

   <!-- check if thirdparty libraries are to be downloaded -->
   <target name="check.inhibit.downloads">
      <condition property="inhibit.downloads">
         <istrue value="${nodownload}"/>
      </condition>
   </target>

   <!-- check if the the user has specied proxy settings -->
   <target name="check.proxy">
      <condition property="hasproxy">
         <and>
            <isset property="proxy.host"/>
            <isset property="proxy.port"/>
            <not>
               <equals arg1="" arg2="${proxy.host}" trim="true"/>
            </not>
            <not>
               <equals arg1="" arg2="${proxy.port}" trim="true"/>
            </not>
         </and>
      </condition>

      <!-- set proxy settings -->
      <condition property="hasproxyauth">
         <and>
            <isset property="hasproxy"/>
            <isset property="proxy.username"/>
            <isset property="proxy.password"/>
            <not>
               <equals arg1="" arg2="${proxy.username}" trim="true"/>
            </not>
            <not>
               <equals arg1="" arg2="${proxy.password}" trim="true"/>
            </not>
         </and>
      </condition>
   </target>
   
   <target name="set.proxy" depends="set.proxy.withoutauth, set.proxy.auth"/>

   <!-- set proxy settings without auth -->
   <target name="set.proxy.withoutauth" if="hasproxy" unless="hasproxyauth" depends="check.proxy">
      <echo>Proxy is set to ${proxy.host}:${proxy.port}</echo>
      <setproxy proxyhost="${proxy.host}" proxyport="${proxy.port}"/>
   </target>

   <!-- set proxy settings using auth -->
   <target name="set.proxy.auth" if="hasproxyauth" depends="check.proxy">
      <echo>Auth Proxy is set to ${proxy.host}:${proxy.port} username=[${proxy.username}]</echo>
      <setproxy proxyhost="${proxy.host}" proxyport="${proxy.port}" proxyuser="${proxy.username}" proxypassword="${proxy.password}"/>
   </target>

   <!-- add JMX classes needed for startup time to run.jar (see JBAS-6185) -->
   <target name="addJmxToRunJar">
    <property name="moduleSource.output" override="true" value="${project.root}/system-jmx/output"/>
    <property name="moduleDest.output" override="true" value="${project.root}/main/output"/>
    <jar update="true" destfile="${moduleDest.output}/lib/run.jar"
       basedir="${moduleSource.output}/classes"
       includes="org/jboss/system/server/jmx/MBeanServerBuilderImpl.class org/jboss/system/server/jmx/LazyMBeanServer.class"
    />
    <copy file="${moduleDest.output}/lib/run.jar" todir="${install.bin}"/>
   </target>

</project>
