<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE project [
   <!ENTITY buildmagic SYSTEM "../tools/etc/buildmagic/buildmagic.ent">
   <!ENTITY libraries SYSTEM "../thirdparty/libraries.ent">
   <!ENTITY modules SYSTEM "../tools/etc/buildmagic/modules.ent">
]>

<!-- ====================================================================== -->
<!--                                                                        -->
<!--  JBoss, the OpenSource J2EE webOS                                      -->
<!--                                                                        -->
<!--  Distributable under LGPL license.                                     -->
<!--  See terms of license at http://www.gnu.org.                           -->
<!--                                                                        -->
<!-- ====================================================================== -->


<!-- $Id: build.xml 82251 2008-12-12 22:45:29Z alesj $ -->




<project name="JBoss/Spring" default="main" basedir=".">

  <!-- ================================================================== -->
  <!-- Setup                                                              -->
  <!-- ================================================================== -->

  <!--
     | Include the common Buildmagic elements.
     |
     | This defines several different targets, properties and paths.
     | It also sets up the basic extention tasks amoung other things.
  -->
  &buildmagic;


  <!-- ================================================================== -->
  <!-- Initialization                                                     -->
  <!-- ================================================================== -->

  <!--
     | Initialize the build system.  Must depend on '_buildmagic:init'.
     | Other targets should depend on 'init' or things will mysteriously fail.
  -->
  <target name="init" unless="init.disable" depends="_buildmagic:init"/>


  <!-- ================================================================== -->
  <!-- Configuration                                                      -->
  <!-- ================================================================== -->

  <!--
     | Configure the build system.
     |
     | This target is invoked by the Buildmagic initialization logic and
     | should contain module specific configuration elements.
  -->
  <target name="configure" unless="configure.disable">

     <condition property="NO_JDK_5" value="true">
        <not>
           <isset property="HAVE_JDK_1.5"/>
        </not>
     </condition>

    <!-- =================== -->
    <!-- Basic Configuration -->
    <!-- =================== -->

    <!-- Module name(s) & version -->
    <property name="module.name" value="jboss-spring"/>
    <property name="module.Name" value="JBoss Spring"/>
    <property name="module.version" value="DEV"/>

    <!-- ========= -->
    <!-- Libraries -->
    <!-- ========= -->
    &libraries;

    <!-- The combined library classpath -->
    <path id="library.classpath">
      <path refid="spring.classpath"/>
    </path>

    <!-- ======= -->
    <!-- Modules -->
    <!-- ======= -->
    &modules;

    <!-- Specify modules upon which this build depends -->
    <path id="dependentmodule.classpath">
      <path refid="jboss.aop.classpath"/>
      <path refid="jboss.common.core.classpath"/>
      <path refid="jboss.common.logging.spi.classpath"/>
      <path refid="jboss.jboss.ejb3.ext.api.classpath" />
      <path refid="jboss.j2se.classpath"/>
      <path refid="jboss.server.classpath"/>
      <path refid="jboss.system.classpath"/>
      <path refid="jboss.systemjmx.classpath"/>
      <path refid="jboss.jboss.deployers.classpath"/>      
      <path refid="jboss.jboss.man.classpath"/>      
      <path refid="jboss.microcontainer.classpath"/>
      <path refid="jboss.jboss.vfs.classpath"/>
      <path refid="jboss.jboss.reflect.classpath"/>
      <path refid="jboss.jbossxb.classpath"/>
      <path refid="jboss.jboss.javaee.classpath"/>
      <path refid="jboss.cache.jbosscache.core.classpath"/>
      <path refid="jboss.cache.jbosscache.pojo.classpath"/>
    </path>

    <!-- Where source files live -->
    <property name="source.java" value="${module.source}/main"/>
    <property name="source.bin" value="${module.source}/bin"/>
    <property name="source.resources" value="${module.source}/resources"/>
    <property name="source.etc" value="${module.source}/etc"/>
    <property name="source.test" value="${module.source}/test"/>

    <!-- Where build generated files will go -->
    <property name="build.reports" value="${module.output}/reports"/>
    <property name="build.classes" value="${module.output}/classes"/>
    <property name="build.lib" value="${module.output}/lib"/>
    <property name="build.api" value="${module.output}/api"/>
    <property name="build.etc" value="${module.output}/etc"/>
    <property name="build.bin" value="${module.output}/bin"/>
    <property name="build.resources" value="${module.output}/resources"/>
    <property name="build.etc" value="${module.output}/etc"/>
    <property name="build.todo" value="${module.output}/todo"/>

    <!-- Install/Release structure -->
    <property name="install.id" value="${module.name}-${module.version}"/>
    <property name="release.id" value="${install.id}"/>
    <property name="install.root" value="${module.output}/${install.id}"/>

    <!-- The combined thirdparty classpath -->
    <path id="thirdparty.classpath">
      <path refid="library.classpath"/>
      <path refid="dependentmodule.classpath"/>
    </path>

    <!-- classpath and local.classpath must have a value using with a path -->
    <property name="classpath" value=""/>
    <property name="local.classpath" value=""/>

    <!-- The classpath required to build classes. -->
    <path id="javac.classpath">
      <pathelement path="${classpath}"/>
      <pathelement path="${local.classpath}"/>
      <path refid="thirdparty.classpath"/>
    </path>

    <!-- The classpath required to build javadocs. -->
    <path id="javadoc.classpath">
      <path refid="javac.classpath"/>
    </path>

    <!-- Packages to include when generating api documentation -->
    <property name="javadoc.packages" value="org.jboss.*"/>

    <!-- Should we force xdoclet generation? -->
    <property name="xdoclet.force" value="false"/>

  </target>

  <!-- ================================================================== -->
  <!-- Convenience targets                                                -->
  <!-- ================================================================== -->
  <target name="build-spring-jars" depends="init, compile">
    <mkdir dir="${build.lib}"/>

    <!-- Generate a jar containing all the compiled sources -->
    <jar destfile="${build.lib}/${module.name}.jar">
      <fileset dir="${build.classes}">
      </fileset>
    </jar>

    <!-- Generate the jar (.deployer) to be used as deployment -->
    <jar destfile="${build.lib}/${module.name}.deployer" >
      <fileset file="${build.lib}/${module.name}.jar"/>
      <fileset dir="${spring.lib}">
        <include name="*.jar"/>
        <!--<exclude name="spring-aop.jar"/>-->
        <!--<exclude name="spring-context.jar"/>-->
        <exclude name="spring-web.jar"/>
        <exclude name="spring-webmvc.jar"/>
      </fileset>
      <metainf dir="${build.resources}" includes="*-jboss-beans.xml"/>
    </jar>
  </target>

  <target name="rebuild-spring-jars" depends="init, clean-spring-jars, compile, build-spring-jars"/>

  <target name="clean-spring-jars" depends="init">
    <delete file="${build.lib}/${module.name}.jar"/>
    <delete file="${build.lib}/${module.name}.deployer"/>
  </target>


  <!-- ================================================================== -->
  <!-- Compile                                                            -->
  <!-- ================================================================== -->

  <!--
     | Compile everything.
     |
     | This target should depend on other compile-* targets for each
     | different type of compile that needs to be performed, short of
     | documentation compiles.
  -->
  <target name="compile"
    description="Compile all source files."
    depends="compile-classes,
          compile-resources"/>

  <!-- Compile all class files -->
  <target name="compile-classes" depends="init">
    <mkdir dir="${build.classes}"/>
    <javac destdir="${build.classes}"
      optimize="${javac.optimize}"
      source="1.5"
      target="1.5"
      debug="${javac.debug}"
      depend="${javac.depend}"
      verbose="${javac.verbose}"
      deprecation="${javac.deprecation}"
      includeAntRuntime="${javac.include.ant.runtime}"
      includeJavaRuntime="${javac.include.java.runtime}"
      failonerror="${javac.fail.onerror}">
      <src path="${source.java}"/>
      <classpath refid="javac.classpath"/>
      <exclude name="org/jboss/spring/deployment/**"/>
      <exclude name="org/jboss/spring/loader/**"/>
      <exclude name="org/jboss/spring/kernel/**"/>
    </javac>
  </target>

  <!-- Compile resource files -->
  <target name="compile-resources" depends="init">
    <mkdir dir="${build.resources}"/>
    <copy todir="${build.resources}" filtering="no">
      <fileset dir="${source.resources}">
        <include name="**"/>
      </fileset>
    </copy>
  </target>

  <!-- Compile etc files (manifests and such) -->
  <target name="compile-etc" depends="init">
    <mkdir dir="${build.etc}"/>
    <copy todir="${build.etc}" filtering="yes" overwrite="yes">
      <fileset dir="${source.etc}">
        <include name="**/*"/>
      </fileset>
    </copy>
  </target>

  <!-- ================================================================== -->
  <!-- Archives                                                           -->
  <!-- ================================================================== -->

  <!--
     | Build all jar files.
  -->
  <target name="jars"
    description="Builds all jar files."
    depends="_buildmagic:build-bypass-check"
    unless="build-bypass.on">

    <antcall target="build-spring-jars"/>
    <!--<antcall target="build-spring-jars-jdk5"/>-->

    <!-- Update the build marker to allow bypassing -->
    <touch file="${build-bypass.marker}"/>
  </target>


  <!-- ================================================================== -->
  <!-- Install & Release                                                  -->
  <!-- ================================================================== -->

  <target name="install"
    description="Install the structure for a release."
    depends="all, _buildmagic:install:default"/>

  <target name="release" depends="install"/>

  <target name="release-zip"
    description="Builds a ZIP distribution."
    depends="release, _buildmagic:release:zip"/>

  <target name="release-tar"
    description="Builds a TAR distribution."
    depends="release, _buildmagic:release:tar"/>

  <target name="release-tgz"
    description="Builds a TAR-GZ distribution."
    depends="release, _buildmagic:release:tgz"/>

  <target name="release-all"
    description="Builds a distribution for each archive type."
    depends="release-zip, release-tgz"/>


  <!-- ================================================================== -->
  <!-- Cleaning                                                           -->
  <!-- ================================================================== -->

  <!-- Clean up all build output -->
  <target name="clean"
    description="Cleans up most generated files."
    depends="_buildmagic:clean"/>

  <!-- Clean up all generated files -->
  <target name="clobber"
    description="Cleans up all generated files."
    depends="_buildmagic:clobber, clean"/>


  <!-- ================================================================== -->
  <!-- Misc.                                                              -->
  <!-- ================================================================== -->

  <target name="main"
    description="Executes the default target (most)."
    depends="most"/>

  <target name="all"
    description="Builds everything."
    depends="jars, docs"/>

  <target name="most"
    description="Builds almost everything."
    depends="jars"/>

  <target name="help"
    description="Show this help message."
    depends="_buildmagic:help:standard"/>

    <!-- ================================================================== -->
    <!-- Dist.                                                              -->
    <!-- ================================================================== -->

    <path id="example.classpath">
      <path refid="jboss.aop.classpath"/>
      <path refid="jboss.common.classpath"/>
      <path refid="jboss.ejb3x.classpath"/>
      <path refid="jboss.j2se.classpath"/>
      <path refid="jboss.j2ee.classpath"/>
      <path refid="jboss.hibernate.classpath"/>
      <path refid="jboss.jnpserver.classpath"/>
      <path refid="jboss.server.classpath"/>
      <path refid="jboss.system.classpath"/>
      <path refid="ejb3-persistence.classpath"/>
      <path refid="spring.classpath"/>
      <pathelement path="${spring.lib}/spring-webmvc.jar"/>
      <pathelement path="${spring.lib}/spring-web.jar"/>
      <!--<pathelement path="${spring.lib}/spring-context.jar"/>-->
      <path refid="jboss.web.classpath"/>
    </path>

    <target name="example-clean" depends="init">
        <delete dir="${module.output}/example"/>
    </target>

    <target name="example-prepare">
        <mkdir dir="${module.output}/example"/>
        <mkdir dir="${module.output}/example/classes"/>
        <mkdir dir="${module.output}/example/war"/>
        <mkdir dir="${module.output}/example/war/WEB-INF"/>
        <mkdir dir="${module.output}/example/war/WEB-INF/classes"/>
        <mkdir dir="${module.output}/example/jar"/>
    </target>

    <!-- MUST use JDK 5 compiler -->
    <target name="example-compile">
        <javac destdir="${module.output}/example/classes" classpathref="example.classpath" debug="on">
            <src path="${source.java}"/>
            <src path="${source.test}"/>
            <include name="org/jboss/tutorial/**"/>
            <include name="org/jboss/annotation/spring/**"/>
            <include name="org/jboss/spring/callback/**"/>
            <include name="org/jboss/spring/support/**"/>
            <exclude name="org/jboss/spring/deployment/**"/>
            <exclude name="org/jboss/spring/deployers/**"/>
            <exclude name="org/jboss/spring/factory/**"/>
            <exclude name="org/jboss/spring/interceptor/**"/>
            <exclude name="org/jboss/spring/io/**"/>
            <exclude name="org/jboss/spring/cluster/**"/>
        </javac>
        <copy todir="${module.output}/example/classes">
            <fileset dir="${source.resources}/test/dd">
                <include name="*.properties"/>
            </fileset>
            <fileset dir="${source.test}">
                <include name="*.properties"/>
            </fileset>
        </copy>
    </target>

    <!-- Package all the Spring dependant non EJB classes -->
    <target name="package-spring">
        <jar jarfile="${module.output}/example/jar/spring-pojo.spring">
            <fileset dir="${module.output}/example/classes">
                <include name="org/jboss/tutorial/spring/**"/>
                <include name="*.properties"/>
            </fileset>
            <metainf dir="${source.resources}/test/dd/spring">
                <include name="jboss-spring.xml"/>
            </metainf>
        </jar>
    </target>

    <!-- Package all the non-persistence EJB classes -->
    <target name="package-ejb">
        <jar jarfile="${module.output}/example/jar/business.ejb3">
            <fileset dir="${module.output}/example/classes">
                <include name="org/jboss/tutorial/ee/**"/>
            </fileset>
        </jar>
    </target>

    <!-- Package the web module -->
    <target name="package-web">
        <copy todir="${module.output}/example/war/WEB-INF/classes">
            <fileset dir="${module.output}/example/classes">
                <include name="org/jboss/tutorial/web/**"/>
            </fileset>
        </copy>
        <war warfile="${module.output}/example/jar/web.war" webxml="${source.resources}/test/dd/web/web.xml">
            <fileset dir="${module.output}/example/war" />
            <fileset dir="${source.resources}/test/web">
                <include name="**/*"/>
            </fileset>
            <webinf dir="${source.resources}/test/dd/web">
                <include name="jboss-web.xml"/>
            </webinf>
        </war>
    </target>

    <!-- Creates an ear file containing all
         the modules as well as application.xml. -->
    <target name="assemble-app">
        <jar jarfile="${module.output}/example/jar/JBoss-Spring.ear">
            <metainf dir="${source.resources}/test/dd">
                <include name="application.xml"/>
            </metainf>
            <fileset dir="${module.output}/example/jar" includes="*.ejb3,*.jar,*.war,*.par,*.spring,*.aop"/>
        </jar>
        <delete file="${module.output}/example/jar/*.war"/>
        <delete file="${module.output}/example/jar/*.ejb3"/>
        <delete file="${module.output}/example/jar/*.spring"/>
        <delete dir="${module.output}/example/classes"/>
        <delete dir="${module.output}/example/war"/>
    </target>

    <target name="example"
            depends="_buildmagic:build-bypass-check"
            unless="build-bypass.on">
        <antcall target="example-clean"/>
        <antcall target="example-prepare"/>
        <antcall target="example-compile"/>
        <antcall target="package-spring"/>
        <antcall target="package-ejb"/>
        <antcall target="package-web"/>
        <antcall target="assemble-app"/>
    </target>

    <target name="dist" depends="jars, example">
        <mkdir dir="${module.output}/example/zip" />
        <unjar src="${module.output}/lib/jboss-spring.deployer"
               dest="${module.output}/example/zip/jboss-spring.deployer" />
        <unjar src="${module.output}/lib/jboss-spring-jdk5.deployer"
               dest="${module.output}/example/zip/jboss-spring-jdk5.deployer" />
        <copy file="${module.output}/example/jar/JBoss-Spring.ear" todir="${module.output}/example/zip"/>
        <copy file="${source.resources}/test/docs/JBoss-Spring-Example.doc" todir="${module.output}/example/zip"/>
        <copy file="${source.resources}/test/docs/JBoss-Spring-Example.html" todir="${module.output}/example/zip"/>
        <copy file="DOCS.html" todir="${module.output}/example/zip"/>
        <mkdir dir="${module.output}/example/zip/src" />
        <copy todir="${module.output}/example/zip/src">
            <fileset dir="${source.test}" includes="**/*.java" />
        </copy>
        <zip destfile="${module.output}/example/dist.zip" basedir="${module.output}/example/zip" />
        <delete dir="${module.output}/example/zip"/>
    </target>

</project>
